<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % isopub PUBLIC "ISO 8879:1986//ENTITIES Publishing//EN//XML" "http://www.w3.org/2003/entities/iso8879/isopub.ent">
<!ENTITY % isonum PUBLIC "ISO 8879:1986//ENTITIES Numeric and Special Graphic//EN" "http://www.w3.org/2003/entities/iso8879/isonum.ent">
<!ENTITY % isotech PUBLIC "ISO 8879:1986//ENTITIES General Technical//EN" "http://www.w3.org/2003/entities/iso8879/isotech.ent">
%isopub;%isonum;%isotech;
<!ENTITY % myEnt SYSTEM "teco.ent">
%myEnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.1" xml:id="BAS"><title>Basics of TECO</title>
    <sect1 xml:id="BAS_USING">
        <title>Using TECO</title>
        <para>TECO may be called from command level by typing the appropriate command, followed by a
            carriage return:<informaltable>
                <tgroup cols="2" align="left" colsep="1" rowsep="1">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <thead>
                        <row>
                            <entry>
                                <para>Operating System</para>
                            </entry>
                            <entry>
                                <para>Command</para>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <para>RT-11 </para>
                            </entry>
                            <entry>
                                <para>R TECO </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>OS/8 </para>
                            </entry>
                            <entry>
                                <para>R TECO </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>TOPS-10 </para>
                            </entry>
                            <entry>
                                <para>R TECO </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>TOPS-20 </para>
                            </entry>
                            <entry>
                                <para>R TECO </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>RSTS/E </para>
                            </entry>
                            <entry>
                                <para>RUN TECO$:TECO –or– EDIT/TECO </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>RSX-11 </para>
                            </entry>
                            <entry>
                                <para>RUN $TEC </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <para>VAX/VMS </para>
                            </entry>
                            <entry>
                                <para>RUN SYS$SYSTEM:TECO32</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable></para>
        <para>TECO will respond by printing an asterisk at the left margin to indicate that it is
            ready to accept user commands. At this point, you may type one or more commands.</para>
        <para>A TECO command consists of one or two characters which cause a specific operation to
            be performed. Some TECO commands may be preceded or followed by arguments. Arguments may
            be either numeric or textual. A numeric argument is simply an integer value which can be
            used to indicate, for example, the number of times a command should be executed. A text
            argument is a string of ASCII characters which might be, for example, words of text or a
            file specification. </para>
        <para>If a command requires a numeric argument, the numeric argument always precedes the
            command. If a command requires a text argument, the text argument always follows the
            command. Each text argument is terminated by a special character (usually a character,
            which TECO hears as an ESCape - see Introduction). This indicates to TECO that the next
            character typed will be the first character of a new command. </para>
        <para>TECO accumulates commands as they are typed in a command string, and executes commands
            upon receipt of two consecutive characters. may be any character you select (if your
            TECO and operating system support user-selectable ESCape surrogates - see sections on ET
            and EE flags). When you type the character you have designated as , TECO receives an
            ESCape character, and an ` (accent grave) is echoed. (If you are not using an ESCape
            surrogate—that is, you are actually pressing an ESCape key—a dollar sign is echoed.) The
            accent grave character is used in examples throughout this manual to represent typed s.
            Note that the carriage return character has no special significance to TECO; only the
            forces execution of the command string. </para>
        <para>TECO executes command strings from left to right until either all commands have been
            executed or a command error is recognized. It then prints an asterisk to signal that
            additional commands may be entered. </para>
        <para>If TECO encounters an erroneous command, it prints an error message and ignores the
            erroneous command as well as all commands which follow it. All error messages are of the
            form: </para>
        <screen>?XXX Message</screen>
        <para>where XXX is an error code and the message is a description of the error. Some error
            messages mention the specific character or string of characters in error. In these error
            messages, TECO represents the non-printing special characters as follows:</para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Character</entry>
                        <entry>Form Displayed</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>&lt;TAB></entry>
                        <entry>&lt;TAB></entry>
                    </row>
                    <row>
                        <entry>&lt;LF></entry>
                        <entry>&lt;LF></entry>
                    </row>
                    <row>
                        <entry>&lt;VT></entry>
                        <entry>&lt;VT></entry>
                    </row>
                    <row>
                        <entry>&lt;FF></entry>
                        <entry>&lt;FF></entry>
                    </row>
                    <row>
                        <entry>&lt;CR></entry>
                        <entry>&lt;CR></entry>
                    </row>
                    <row>
                        <entry>&lt;ESCAPE></entry>
                        <entry>&lt;ESC></entry>
                    </row>
                    <row>
                        <entry>&lt;CTRL/x></entry>
                        <entry>&lt;^x></entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para>Every error message is followed by an asterisk at the left margin, indicating that
            TECO is ready to accept additional commands. If you type a single question mark
            character after a TECO-generated error message, TECO will print the erroneous command
            string up to and including the character which caused the error message. This helps you
            to find errors in long command strings and to determine how much of a command string was
            executed before the error was encountered. </para>
        <para>You can correct typing errors by hitting the DELETE key, which may be labeled DEL or
            RUBOUT or, typed by holding down the CONTROL key while depressing the "U" key. </para>
        <para>When you are done editing, use the EX command to exit TECO, as described below in
                <xref linkend="sect2_ffz_ydy_2lb"/>.</para>
    </sect1>
    <sect1 xml:id="BAS_DSF">
        <title>Data Structure Fundamentals </title>
        <para>TECO considers any string of ASCII codes to be text. Text is broken down into units of
            characters, lines, and pages. A character is one ASCII code. A line of text is a string
            of ASCII codes including one line terminator (usually a line feed) as the last character
            on the line. A page of text is a string of ASCII codes including one form feed character
            as the last character on the page.</para>
        <para>TECO maintains a text buffer in which text is stored. The buffer usually contains one
            page of text, but the terminating form feed character never appears in the buffer. TECO
            also maintains a text buffer pointer. The pointer is a movable position indicator which
            is never located directly on a character, but is always between characters: between two
            characters in the buffer, before the first character in the buffer, or after the last
            character in the buffer. </para>
        <para>Line feed and form feed characters are inserted automatically by TECO. A line feed is
            automatically appended to every carriage return typed to TECO and a form feed is
            appended to the contents of the buffer by certain output commands. Additional line feed
            and form feed characters may be entered into the buffer as text. If a form feed
            character is entered into the buffer, it will cause a page break upon output; text
            following the form feed will begin a new page. </para>
        <para>Finally, TECO maintains an input file and an output file, both of which are selected
            by the user through file specification commands. The input file may be on any device
            from which text may be accepted. The output file may be on any device on which edited
            text may be written. </para>
        <para>TECO functions as a pipeline editor. Text is read from the input file into the text
            buffer, and is written from the buffer onto the output file. In the VAX/VMS
            implementation, it is possible to "back up" as well as page forward in the file being
            edited. In other implementations, once text has been written to the output file, it
            cannot be accessed again without closing the output file and reopening it as an input
            file.</para>
    </sect1>
    <sect1>
        <title>File Selection Commands </title>
        <para>Input and output files may be specified to TECO in several ways. The following
            sections present first a simple method for specifying files, and then more sophisticated
            commands that permit flexible file selection. </para>
        <note>
            <para>All of the following file selection commands are shown with a general argument of
                "filespec". The actual contents of this filespec argument are operating system
                dependent. See the operating characteristics appendices. Examples include a mixture
                of file specifications from various operating systems.</para>
        </note>
        <sect2>
            <title>Simplified File Selection </title>
            <para>For most simple applications, you can use special operating system commands to
                specify the name of the file you wish to edit at the same time that you start up
                TECO. To create a new file: </para>
            <screen>MAKE filespec</screen>
            <para>This command starts up TECO and creates the specified file for output. </para>
            <para>To edit an existing file: </para>
            <screen>TECO filespec</screen>
            <para>This command starts up TECO and opens the specified file for editing while
                preserving the original file (as a backup file). It also automatically brings the
                first page of the file into the text buffer. These functions simulate the EB command
                described in Chapter 5.</para>
            <para>If any of the above commands do not seem to work on your operating system, consult
                the appropriate appendix for information about how to install TECO and its
                associated operating system commands.</para>
        </sect2>
        <sect2>
            <title>Input File Specification (ER command) </title>
            <para>TECO will accept input text from any input device in the operating system. The
                input device may be specified by the text string supplied in the ER command (and
                which, like any text argument, is terminated by a character). The ER command causes
                TECO to open the specified file or print an error message if the file is not found.
                This command does not cause any portion of the file to be read into the text buffer,
                however. The following examples illustrate use of the ER command.</para>
            <informaltable>
                <tgroup cols="2" align="left" colsep="1" rowsep="1">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <thead>
                        <row>
                            <entry>Command</entry>
                            <entry>Function</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>ERfilespec`</entry>
                            <entry>General form of the ER command where "filespec" is the
                                designation of the input file. The command is terminated by a
                                character.</entry>
                        </row>
                        <row>
                            <entry>ERPR:`</entry>
                            <entry>Prepare to read an input file from the paper tape reader.</entry>
                        </row>
                        <row>
                            <entry>ERPROG.MAC`</entry>
                            <entry>Prepare to read input file PROG.MAC from the system’s default
                                device.</entry>
                        </row>
                                        <row>
                        <entry>ERDX1:PROG.FOR`</entry>
                        <entry>Prepare to read input file PROG.FOR from DX1:.</entry>
                    </row></tbody>
                </tgroup>
            </informaltable>
            <para>TECO will only keep one input and one output file open and selected at a time. The
                current input file may be changed by simply using the ER command to specify a new
                file. </para>
            <para>It is not always necessary to specify an input file. If you want to create a file
                without using any previously edited text as input, you may type commands to insert
                the necessary text directly into the text buffer from the keyboard and, at the end
                of each page, write the contents of the buffer onto an output file. Since all input
                is supplied from the keyboard, no input file is necessary.</para>
        </sect2>
        <sect2>
            <title>Output File Specification (EW command) </title>
            <para>TECO will write output text onto any output device in the operating system. The
                output file may be specified by means of the text string supplied in an EW command.
                If the output device is a file-structured device (for example, a disk), the file
                name and any extension must be supplied. If a file name is specified but no device
                is explicitly specified, the system’s default device is assumed. The following
                examples illustrate use of the EW command.</para>
            <informaltable>
                <tgroup cols="2" align="left" colsep="1" rowsep="1">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <thead>
                        <row>
                            <entry>Command</entry>
                            <entry>Function</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>EWfilespec`</entry>
                            <entry>General form of the EW command where "filespec" is the
                                designation of the input file. The command is terminated by a
                                character.</entry>
                        </row>
                        <row>
                            <entry>EWSYS:TEXT.LST`</entry>
                            <entry>Prepare to write output file TEXT.LST on SYS:.</entry>
                        </row>
                        <row>
                            <entry>EWPROG`</entry>
                            <entry>Prepare to write output file PROG on the system’s default
                                device.</entry>
                        </row>
                        <row>
                        <entry>
                            <para>ERDX1:INPUT.MAC` </para>
                            <para>EWOUTPUT.MAC`` </para>
                        </entry>
                        <entry>Open an input file INPUT.MAC to be found on DX1: and open an output
                            file named OUTPUT.MAC. The double (echoed as ``) terminates the command
                            string and causes the string to be executed. Note that the which
                            terminates the EW command may be one of the two s which terminates the
                            command string.</entry>
                    </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>You do not need to specify an output file if you only want to examine an input
                file, without making permanent changes or corrections. In this case, the contents of
                the input file may be read into the text buffer page by page and examined at the
                terminal. Since all output is printed on the user terminal, no output file is
                needed.</para>
        </sect2>
        <sect2 xml:id="sect2_ffz_ydy_2lb">
            <title>Closing Files (EX command) </title>
            <para>When you are finished editing a file, use the EX command to close out the file and
                exit from TECO. The current contents of the text buffer and any portion of the input
                file that has not been read yet are copied to the output file before TECO exits. The
                EX command takes no arguments.</para>
            <informaltable>
                <tgroup cols="2" align="left" colsep="1" rowsep="1">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <thead>
                        <row>
                            <entry>Command</entry>
                            <entry>Function</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>EX``</entry>
                            <entry>Write the text buffer to the current output file, move the
                                remainder of the current input file to the current output file,
                                close the output file, then return to the operating system.</entry>
                        </row>
                        <row>
                            <entry>
                                <para>ERFILE.MAC`</para>
                                <para>EWCOPY.MAC` EX``</para>
                            </entry>
                            <entry>Open an input file FILE.MAC and open an output file named
                                COPY.MAC, then copy all the text in the input file to the output
                                file, close the output file, and exit from TECO.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </sect2>
    </sect1>
    <sect1>
        <title>Input and Output Commands</title>
        <para>The following commands permit pages of text to be read into the TECO text buffer from
            an input file or written from the buffer onto an output file. Once a page of text has
            been written onto the output file, it cannot be recalled into the text buffer unless the
            output file is closed and reopened as an input file. </para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Command</entry>
                        <entry>Function</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <para>Y </para>
                        </entry>
                        <entry>
                            <para>Clear the text buffer, then read the next page of the input file
                                into the buffer. Since the Y command causes the contents of the text
                                buffer to be lost, it is not permitted if an output file is open and
                                there is text in the buffer. </para>
                        </entry>
                    </row>
               
                <row>
                    <entry>
                        <para>P </para>
                    </entry>
                    <entry>
                        <para>Write the contents of the text buffer onto the next page of the output
                            file, then clear the buffer and read the next page of the input file
                            into the buffer. </para>
                    </entry>
                </row>
                <row>
                    <entry>
                        <para>nP </para>
                    </entry>
                    <entry>
                        <para>Execute the P command n times. If n is not specified, a value of 1 is
                            assumed. After each Y, P, or nP command, TECO positions the pointer
                            before the first character in the buffer. </para>
                    </entry>
                </row> </tbody>
            </tgroup>
        </informaltable>
    </sect1>
    <sect1>
        <title>Pointer Positioning Commands </title>
        <para>The buffer pointer provides the means of specifying the location within a block of
            text at which insertions, deletions or corrections are to be made. The following
            commands permit the buffer pointer to be moved to a position between any two adjacent
            characters in the buffer. </para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Command</entry>
                        <entry>Function</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <para>J </para>
                        </entry>
                        <entry>
                            <para>Move the pointer to the beginning of the buffer. </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>L </para>
                        </entry>
                        <entry>
                            <para>Move the pointer forward to a position between the next line feed
                                and the first character of the next line. That is, advance the
                                pointer to the beginning of the next line. </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>nL </para>
                        </entry>
                        <entry>
                            <para>Execute the L command n times, where n is a signed integer. A
                                positive value of n moves the pointer to the beginning of the nth
                                line following the current pointer position. A negative value moves
                                the pointer backward n lines and positions it at the beginning of
                                the nth line preceding the current position. If n is zero, the
                                pointer is moved to the beginning of the line on which it is
                                currently positioned. </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>C </para>
                        </entry>
                        <entry>
                            <para>Advance the pointer forward across one character. </para>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <para>nC </para>
                        </entry>
                        <entry>
                            <para>Execute the C command n times, where n is a signed integer. A
                                positive value of n moves the pointer forward across n characters. A
                                negative value of n moves the pointer backward across n characters.
                                If n is zero, the pointer position is not changed. Remember that
                                there are two characters, and, at the end of each line in the
                                buffer. </para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para>These commands may be used to move the buffer pointer across any number of lines or
            characters in either direction; however, they will not move the pointer across a page
            boundary. If a C command attempts to move the pointer backward beyond the beginning of
            the buffer or forward past the end of the buffer, an error message is printed and the
            command is ignored. </para>
        <para>If an L command attempts to exceed the page boundaries in this manner, the pointer is
            positioned at the boundary which would have been exceeded. Thus, in a page of 2000
            lines, the command "–4000L" would position the pointer before the first character in the
            buffer. The command "4000L" would position the pointer after the last character in the
            buffer. No error message is printed in either case. </para>
    </sect1>
    <sect1>
        <title>Type-Out Commands </title>
        <para>The following commands permit sections of the text in the buffer to be printed out on
            your terminal for examination. These commands do not move the buffer pointer.</para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Command</entry>
                        <entry>Function</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>T</entry>
                        <entry>Type the contents of the text buffer from the current position of the
                            pointer through and including the next line feed character.</entry>
                    </row>
                    <row>
                        <entry>nT</entry>
                        <entry>Type n lines, where n is a signed integer. A positive value of n
                            causes the n lines following the pointer to be typed. A negative value
                            of n causes the n lines preceding the pointer to be typed. If n is zero,
                            the contents of the buffer from the beginning of the line on which the
                            pointer is located up to the pointer is typed. This is useful for
                            verifying the location of the buffer pointer.</entry>
                    </row>
                    <row>
                        <entry>HT</entry>
                        <entry>Type the entire contents of the text buffer.</entry>
                    </row>
                    <row>
                        <entry>V</entry>
                        <entry>Type the current line. Equivalent to the sequence "0TT".</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <sect2 xml:id="BAS_TOC_IIC">
            <title>Immediate Inspection Commands [not in TECO-10] </title>
            <para>In addition, there are available as a convenience abbreviations of two frequently
                used type out commands. Each one consists of a single character, and must be the
                very first character typed after TECO prints its prompting asterisk. Each of these
                commands takes effect immediately; there is no need to follow any of these commands
                by any character. For this reason, these commands are known as "immediate" commands
                (see <xref linkend="CSE"/> for more information on immediate commands). </para>
            <informaltable>
                <tgroup cols="2" align="left" colsep="1" rowsep="1">
                    <colspec colname="c1"/>
                    <colspec colname="c2"/>
                    <thead>
                        <row>
                            <entry>Command</entry>
                            <entry>Function</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>&lt;LF></entry>
                            <entry>Immediately execute an LT command. This command is issued by
                                typing the line feed key as the first keystroke after TECO’s prompt.
                                It causes TECO to move the pointer ahead one line and then type out
                                the new line. On terminals without a line feed key, typing has the
                                same effect. (See also the next command.)</entry>
                        </row>
                        <row>
                            <entry>&lt;DELIM></entry>
                            <entry>Immediately execute an LT command.(Action identical to that of
                                the command above.) This command is available when an ESCape
                                surrogate is active, and causes TECO to move the pointer ahead one
                                line and then type out the new line when a is the first thing typed
                                after TECO’s prompting asterisk. [RSTS/E only]</entry>
                        </row>
                        <row>
                            <entry>&lt;BS></entry>
                            <entry>Immediately execute a –LT command. This command is issued by
                                typing the backspace key as the first keystroke after TECO’s prompt.
                                It causes TECO to move the pointer back one line and then type the
                                line just moved over on the terminal. On terminals without a
                                backspace key, typing has the same effect.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>These commands are useful for "walking through" a file, examining and/or modifying
                lines one at a time. </para>
        </sect2>
    </sect1>
    <sect1>
        <title>Text Modification Commands</title>
        <para>You can insert or delete text from the buffer using the following commands:</para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Command</entry>
                        <entry>Function</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Itext`</entry>
                        <entry>Where "text" is a string of ASCII characters terminated by a
                            character. The specified text is inserted into the buffer at the current
                            position of the pointer. The pointer is positioned immediately after the
                            last character of the insertion.</entry>
                    </row>
                    <row>
                        <entry>K</entry>
                        <entry>Delete the contents of the text buffer from the current position of
                            the pointer up to and including the next line feed character.</entry>
                    </row>
                    <row>
                        <entry>nK</entry>
                        <entry>Execute the K command n times, where n is a signed integer. A
                            positive value of n causes the n lines following the pointer to be
                            deleted. A negative value of n causes the n lines preceding the pointer
                            to be deleted. If n is zero, the contents of the buffer from the
                            beginning of the line on which the pointer is located up to the pointer
                            is deleted.</entry>
                    </row>
                    <row>
                        <entry>HK</entry>
                        <entry>Delete the entire contents of the text buffer.</entry>
                    </row>
                    <row>
                        <entry>D</entry>
                        <entry>Delete the character following the buffer pointer.</entry>
                    </row>
                    <row>
                        <entry>nD</entry>
                        <entry>Execute the D command n times, where n is a signed integer. A
                            positive value of n causes the n characters following the pointer to be
                            deleted. A negative value of n causes the n characters preceding the
                            pointer to be deleted. If n is zero, the command is ignored.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para>Like the L and C commands, the K and D commands may not execute across page
            boundaries. If a K command attempts to delete text up to and across the beginning or end
            of the buffer, text will be deleted only up to the buffer boundary and the pointer will
            be positioned at the boundary. No error message is printed. A D command attempting to
            delete text past the end or beginning of the text buffer will produce an error message
            and the command will be ignored. </para>
    </sect1>
    <sect1>
        <title>Search Commands </title>
        <para>The following commands may be used to search the input file for a specified string of
            characters. </para>
        <informaltable>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <colspec colname="c1"/>
                <colspec colname="c2"/>
                <thead>
                    <row>
                        <entry>Command</entry>
                        <entry>Function</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Stext`</entry>
                        <entry>Where "text" is a string of ASCII characters terminated by a
                            character. This command searches the text buffer for the next occurrence
                            of the specified character string following the current pointer
                            position. If the string is found, the pointer is positioned after the
                            last character on the string. If it is not found, the pointer is
                            positioned immediately before the first character in the buffer and an
                            error message is printed.</entry>
                    </row>
                    <row>
                        <entry>Ntext`</entry>
                        <entry>Performs the same function as the S command except that the search is
                            continued across page boundaries, if necessary, until the character
                            string is found or the end of the input file is reached. If the end of
                            the input file is reached, an error message is printed. On VAX/VMS, you
                            can "back up" into the file and continue editing, although doing so uses
                            TECO features beyond those introduced in this chapter. Using only basic
                            features (or a TECO implementation other than VAX/VMS), you must close
                            the output file and reopen it as an input file before you can edit the
                            file further.</entry>
                    </row>

                </tbody>
            </tgroup>
        </informaltable>
        <para>Both the S command and the N command begin searching for the specified character
            string at the current position of the pointer. Therefore, neither command will locate
            any occurrence of the character string which precedes the current pointer position, nor
            will it locate any character string which is split across a page boundary. </para>
        <para>Both commands execute the search by attempting to match the command argument,
            character for character, with some portion of the buffer contents. If an N command
            reaches the end of the buffer without finding a match for its argument, it writes the
            contents of the buffer onto the output file, clears the buffer, reads the next page of
            the input file into the buffer, and continues the search. </para>
    </sect1>
    <sect1>
        <title>Sample Editing Job </title>
        <para>The following sample editing job is included to help the new user to achieve a greater
            understanding of the basic TECO commands. The entire terminal output from the editing
            run is reproduced intact, with numbers added in the left margin referring to the
            explanatory paragraphs which follow. </para>
        <example>
            <title>Sample Editing Job</title>
            <screen><co xml:id="co_xgb_3tj_2lb"/> ! ? EWDT1:FILE1.TXT``
<co xml:id="co_bcs_4tj_2lb"/> ! ? HKIMR. JOHN P. JONES
! COMPUTER ELECTRONICS CORPORATION
! BOSTON, MASAASACHUSETTS
!
! DEAR MR. JONES:c
!
! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
! PERTAINING TO THE NEW TECO TEXT EDITING AND CORRECTING
! PROGRAM.
!
! ENCLOSED IS A COPY OF THE TECO USERS’S GUIDE, WHICH
! SHOULD ANSWER ALL OF YOUR QUESTIONS.
!
! SINCERELY,
!
!
!
!
! ``
<co xml:id="co_bhw_ptj_2lb"/> ! ? -20LSETTS`I 02150``
! ? STION`2C13DIREGARDING``
<co xml:id="co_jvf_stj_2lb"/> ! ? SGUIDE`-5DIMANUAL``
! ? SELY`0T``
! SINCERELY? 0KIVERY TRULY YOURS``
! ? HT``
! MR. JOHN P. JONES
! COMPUTER ELECTRONICS CORPORATION
! BOSTON, MASSACHUSETTS 02150
!
! DEAR MR. JONES:
!
! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
! REGARDING THE NEW TECO TEXT EDITING AND CORRECTING
! PROGRAM.
!
! ENCLOSED IS A COPY OF THE TECO USER’S MANUAL, WHICH
! SHOULD ANSWER ALL OF YOUR QUESTIONS.
!
! VERY TRULY YOURS,
!
!
!
!
!
<co xml:id="co_m5l_ttj_2lb"/> ! ? EX``
! (TECO is rerun, operating system dependent)
! ? ERDT1:FILE1.TXT`EWLP:``
<co xml:id="co_zdk_5tj_2lb"/> ! ? Y5KIMR. JAMES B. SMITH
! DATEK ASSOCIATES, INC.
! 122 MAIN STREET WEST
! AUSTIN, TEXAS
!
! DEAR MR. SMITH:
! ``
! ? HT``
! MR. JAMES B. SMITH
! DATEK ASSOCIATES, INC.
! 122 MAIN STREET WEST
! AUSTIN, TEXAS
!
! DEAR MR. SMITH:
!
! I WAS PLEASED TO RECEIVE YOUR REQUEST FOR INFORMATION
! REGARDING THE NEW TECO TEXT EDITING AND CORRECTING
! PROGRAM.
!
! ENCLOSED IS A COPY OF THE TECO USER’S MANUAL, WHICH
! SHOULD ANSWER ALL OF YOUR QUESTIONS.
!
! VERY TRULY YOURS,
!
!
!
!
!
! ? EX``</screen>
        </example>
        <calloutlist>
            <callout arearefs="co_xgb_3tj_2lb">
                <para>At this point, the user called TECO into memory. TECO responded by printing an
                    asterisk at the left margin. The user then entered an EW command, opening an
                    output file called "FILE1.TXT" on DT1. There is no input file. Upon receipt of
                    the double (echoed as ``), TECO created the designated output file, then printed
                    another asterisk at the left margin. </para>
            </callout>
            <callout arearefs="co_bcs_4tj_2lb">
                <para>The user entered a command string consisting of two commands. The HK command
                    cleared the text buffer (not really necessary, since it was already empty), and
                    the I command inserted 18 lines of text into the buffer, including 8 blank
                    lines. TECO executed these commands upon receipt of the second double . At this
                    point, the buffer pointer was positioned at the end of the buffer, following the
                    last line feed character in the text. </para>
                <note>
                    <para>Note that the user made an error while typing the word "MASSACHUSETTS". He
                        typed "MASA", then realized his mistake and struck the DELETE key once to
                        delete the second "A". TECO echoed the deleted character. The user then
                        typed the correct character and continued the insertion. </para>
                </note>
            </callout>
            <callout arearefs="co_bhw_ptj_2lb">
                <para>The user typed –20L to move the pointer to the beginning of the buffer and
                    SETTS` to position the pointer immediately after the character string "ETTS"
                    (which terminates the word "MASSACHUSETTS"). He then used an I command to insert
                    one space and a five-digit zip code. A second S command positioned the pointer
                    after the word "INFORMATION". The 2C command moved the pointer to the beginning
                    of the next line (carriage return and line feed count two characters), and the
                    user deleted the words "PERTAINING TO" and replaced them with the word
                    "REGARDING". </para>
            </callout>
            <callout arearefs="co_jvf_stj_2lb">
                <para>The user continued editing by positioning the pointer after the word "GUIDE".
                    He then deleted this word, and replaced it with the word "MANUAL". Finally, he
                    searched for the word "SINCERELY", typed 0T to determine that the pointer was
                    correctly positioned between the Y and the comma which follows it, and typed 0K
                    to delete everything on the line except the comma. He then inserted "VERY TRULY
                    YOURS" in place of the word "SINCERELY". An HT command caused the edited text to
                    be printed at the terminal. </para>
            </callout>
            <callout arearefs="co_m5l_ttj_2lb">
                <para>The command string EX`` caused the contents of the buffer to be written onto
                    the output file and the output file to be closed. The user then reentered TECO
                    and reopened the file "FILE1.TXT" as an input file and specified the line
                    printer as an output file. </para>
            </callout>
            <callout arearefs="co_zdk_5tj_2lb">
                <para>This command string reads the first (and only) page of "FILE1.TXT" into the
                    buffer, deleted the first 5 lines, replaced them with a different address and
                    salutation, then printed the contents of the buffer on the terminal for
                    verification and finally printed the new version of the letter onto the line
                    printer. </para>
                <note>
                    <para>Note that the previous version of the letter still resides in file
                        "FILE1.TXT" on DT1.</para>
                </note>
            </callout>
        </calloutlist>
    </sect1>
    <sect1>
        <title>Interlude </title>
        <para>The rest of this manual is a description of TECO in all its glory. TECO is a complex
            editor and has many features because it has been under development for a long time.
            (TECO is older than some of the readers of this manual!) Do not try to understand
            everything the first time through. If you find that what you are reading seems
            hopelessly obscure, or makes no sense whatsoever, skip to the next section and come back
            to it some time later. It will be a while before you need all of TECO’s features. </para>
        <para>This manual is meant to be a reference manual and not a tutorial. </para>
        <para>The commands described in this manual are those implemented in TECO-32 Version 40,
            TECO-11 Version 40, TECO-8 Version 7, and TECO-10 Version 3. Some of the more obscure
            commands may not be present under some operating systems, in which case this is
            indicated by a note in the form [Not in TECO-x]. </para>
        <para>This manual also describes some (but not necessarily all) of the obscure commands that
            belong to one implementation of TECO but not to the other implementations. Such commands
            are flagged by a note of the form [TECO-x only]. These commands are not to be considered
            part of the so-called "Standard TECO" and should not be used in applications that may be
            run on multiple operating systems. Consult also the appendices for commands that are
            very operating system dependent.</para>
    </sect1></chapter>